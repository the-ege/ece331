Seth Raymond
ECE331 Homework 2

1.

#!/usr/bin/perl

open(IN,"/usr/share/dict/words") or die "Cannot open dictionary\n";

while(<IN>) {
	chomp;
	$words[length($_)]++; #each element holds num of words for that element's length
}

for ($i=0;$i<@words;$i++) {
	printf("%02d",$i);
	print " : " . "*" x (20*log($words[$i]+1)/log(10)) . "\n"; #scales to fit screen
}

close(IN);

2. wget http://www.open.com.au/mikem/bcm2835/bcm2835-1.5.tar.gz
   tar xzvf bcm2835.1.5.tar.gz
   cd bcm2835-1.5
   ./configure
   make
   sudo make install

3.  Found on www.regular-expressions.info/floatingpoint.html
	a) 0
	b) [+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?

4.

#include <stdio.h>
#include <glob.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

/*
 * Program takes one command line argument as a glob pattern
 * and returns the file permissions as hex for each file
 * matched with the glob pattern.
 */

int main (int argc, char *argv[])
{
	glob_t glob_struct;
	struct stat stat_struct;
	int status, i;

	if (argc == 1 || argc > 2) { /* There is always at least one argument, the program name */
		printf("Incorrect number of arguments!\n");
		return -1;
	}
	
	status = glob(argv[1], 0, NULL, &glob_struct);
	
	/* Error checking */

	if (status == GLOB_NOSPACE) {
		printf("Glob returns out of memory error!\n");
		globfree(&glob_struct);
		return -2;
	}
	else if (status == GLOB_ABORTED) {
		printf("Glob returns a read error!\n");
		globfree(&glob_struct);
		return -3;
	}
	else if (status == GLOB_NOMATCH) {
		printf("Glob returns no found matches!\n");
		globfree(&glob_struct);
		return -4;
	}

	for (i=0;i<glob_struct.gl_pathc;i++) {
		status = stat(glob_struct.gl_pathv[i], &stat_struct); /* Call stat() on glob path, get info back*/
		/* Error checking */

		if (status != 0) {
			printf("Stat returns an error!\n");
			return -5;
		}

		/* Print permissions in hex */

		printf("%s : 0x%04x\n", glob_struct.gl_pathv[i],stat_struct.st_mode);

	}	

	globfree(&glob_struct); /* Pre-written function to free dynamically allocated mem in glob struct */

	return 0;
}

5. \$[0-9]+(\.[0-9]{2,3})?$
   Minimum match is $0
   Matches on a '$' character, one or more numbers (ranging from 0-9),
   and a grouped period followed by two or three numbers (0-9) zero or one times.
6.
	a) Will match on '-' and a 0-9 character with zero or one leading zeros between the number and the '-' character,
	or any number between 10 and 39, or on any number between 40 and 42.
	b) Will match on exactly four of the string "!@#$%^&*", a space,
	then any multiple of four (excluding zero) copies of the string "!@#$%^&*".
7.

#!/usr/bin/perl

# Code taken from ECE331 website and edited for homework 2 question 7

open(IN,"./netlist.in");

while (<IN>) {
	next if (/^$/); #remove blank lines
	next if (1 .. /^Net/); #skip lines until column headers
	chomp;
	s/@\d+//; #matches on @[0-9]+, or an '@' char with one or more 0-9 chars
	@x=split(' '); # each element of list x is loaded from the line, separated by spaces
	if ($#x==4) { #if the last element of the list x is 4,
		$net=shift@x; #return the first element of the list x to store in $net, shorten x by 1 
	}
	push @{$nl{$net}},($x[0] . "-" . $x[1]); #nl is a hash with $net as a key to list values, done using references
}

foreach $k (sort(keys(%nl))) { 
	print "$k "; #print the key
	foreach $p (@{$nl{$k}}) {
		print "$p "; #print the list of values corresponding to the key
	}
	print "\n";
}

close(IN);
