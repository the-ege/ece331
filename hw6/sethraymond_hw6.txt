Seth Raymond
ECE331
HW6

1. Code has been written and is posted to Gitlab. The output has been tested using hexdump -C
and comparisons with other students. Tested values included callname of "NJ7P  ", as given in the
AX25.2.2 standard (disregarding the typo in the standard). Various values for the INFO block
were passed, including values of "string" and "stuff" and "information goes here" to give 
various crc ouputs.

The output for callname "NJ7P  " and INFO "information goes here" is as follows (in hex):

$ ./ax25 "NJ7P  " "information goes here" > file && hexdump -C file

00000000  82 a0 b4 aa 9a 8a 60 9c  94 6e a0 40 40 76 ae 92  |......`..n.@@v..|
00000010  88 8a 64 40 63 03 f0 69  6e 66 6f 72 6d 61 74 69  |..d@c..informati|
00000020  6f 6e 20 67 6f 65 73 20  68 65 72 65 3b 54        |on goes here;T|
0000002e

2. 
	a) $ sudo insmod hello.ko
	b) $ dmesg | tail | grep "Hello" #gives: [104739.874891] Hello, world
	   # or
	   $ lsmod | grep "hello" # gives: hello                    741  0 
	c) sudo rmmod hello #looking at dmesg says: [104866.546250] Goodbye, cruel world 
	d)

		obj-m += hello.o
		KERNELDIR ?= /lib/modules/$(shell uname -r)/build
		default:
			$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
		clean:
			$(MAKE) -C $(KERNELDIR) M=$(PWD) clean

	e)

		#include <linux/init.h>
		#include <linux/module.h>
		MODULE_LICENSE("Dual BSD/GPL");

		static int hello_init(void)
		{
			printk(KERN_ALERT "Hello, world\n");
			return 0;
		}

		static void hello_exit(void)
		{	
			printk(KERN_ALERT "Goodbye, cruel world\n");
			return;
		}

		module_init(hello_init);
		module_exit(hello_exit);

3.

C code:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/types.h>

int main(void)
{
	pid_t pid;

	pid = fork(); //pid holds the value of the child process
	if (pid < 0) { //fail on fork
		perror("fail on fork: ");
		return 1;
	} else if (pid == 0) { //the child running the code thinks it has pid 0
		while(1) {
			sleep(1); //sleep for one second
		}
	} else { //parent process
		kill(pid,SIGKILL);
		sleep(10);	
	}

	return 0;
}

Makefile:

TARGET=zombie
OBJS=zombie.o
CFLAGS=-g -Wall
LIBS=-lm

.PHONY: all clean

all: ${TARGET}
${TARGET}: ${OBJS}
	${CC} -o ${TARGET} ${OBJS} ${LIBS}
clean:
	rm -f ${TARGET} ${OBJS}

Terminal command:
$ ps agx | grep "[z]ombie"

# Output: 
# 2964 pts/1    S+     0:00 ./zombie
# 2965 pts/1    Z+     0:00 [zombie] <defunct>

# The quoting and square brackets remove the call to grep from ps.
# This works because grep is looking for regular expression starting
# with 'z' and ending with 'ombie.' This filters the grep command
# out of the search of ps.
